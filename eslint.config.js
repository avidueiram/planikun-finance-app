// @ts-check
const eslint = require('@eslint/js');
const stylistic = require('@stylistic/eslint-plugin');
const angular = require('angular-eslint');
const importPlugin = require('eslint-plugin-import'); // we can't use import as a name because it's a reserved word
const importNewlines = require('eslint-plugin-import-newlines');
const tseslint = require('typescript-eslint');

module.exports = tseslint.config(
  {
    files: ['**/*.ts'],
    extends: [
      eslint.configs.recommended,
      ...tseslint.configs.recommended,
      ...tseslint.configs.stylistic,
      ...angular.configs.tsRecommended,
    ],
    processor: angular.processInlineTemplates,
    plugins: {
      // @ts-ignore
      '@stylistic': stylistic,
      'import-newlines': importNewlines,
      'import': importPlugin,
    },
    rules: {
      '@angular-eslint/component-class-suffix': ['error', { suffixes: ['Component', 'Page'] }],
      '@angular-eslint/component-selector': ['error', { type: 'element', prefix: 'app', style: 'kebab-case' }],
      '@angular-eslint/directive-selector': ['error', { type: 'attribute', prefix: 'app', style: 'camelCase' }],
      '@stylistic/arrow-parens': ['error', 'always'],
      '@stylistic/arrow-spacing': ['error', { 'before': true, 'after': true }],
      '@stylistic/eol-last': ['error', 'always'],
      '@stylistic/function-call-spacing': ['error', 'never'],
      '@stylistic/key-spacing': ['error', { 'beforeColon': false, 'afterColon': true }],
      '@stylistic/member-delimiter-style': [
        'error',
        {
          'multiline': {
            'delimiter': 'semi',
            'requireLast': true,
          },
          'singleline': {
            'delimiter': 'semi',
            'requireLast': true,
          },
          'multilineDetection': 'brackets',
        },
      ],
      '@stylistic/no-whitespace-before-property': 'error',
      '@stylistic/space-before-function-paren': ['error', {
        'anonymous': 'always',
        'named': 'never',
        'asyncArrow': 'always',
      }],
      '@stylistic/space-in-parens': ['error', 'never'],
      'array-bracket-spacing': [2, 'never'],
      'arrow-parens': [2, 'always'],
      'block-spacing': [2, 'never'],
      'brace-style': 2,
      'camelcase': [2, { properties: 'never' }],
      'comma-dangle': [2, 'always-multiline'],
      'comma-spacing': 2,
      'comma-style': 2,
      'computed-property-spacing': 2,
      'constructor-super': 2,
      'curly': [2, 'multi-line'],
      'eol-last': 2,
      'func-call-spacing': 2,
      'generator-star-spacing': [2, 'after'],
      'guard-for-in': 2,
      'import-newlines/enforce': ['error', { 'items': 6, 'max-len': 100 }],
      'import/no-duplicates': 'error',
      'import/no-unresolved': 0,
      'import/order': [
        'error',
        {
          'groups': [
            'builtin',
            'external',
            'parent',
            'sibling',
            'index',
          ],
          'alphabetize': {
            'order': 'asc',
            'caseInsensitive': true,
          },
          'newlines-between': 'never',
        },
      ],
      'indent': ['error', 2],
      'key-spacing': 2,
      'keyword-spacing': 2,
      'linebreak-style': 2,
      'max-len': 'off',
      'no-array-constructor': 2,
      'no-caller': 2,
      'no-cond-assign': 0,
      'no-extend-native': 2,
      'no-extra-bind': 2,
      'no-invalid-this': 2,
      'no-irregular-whitespace': 2,
      'no-mixed-spaces-and-tabs': 2,
      'no-multi-spaces': 2,
      'no-multi-str': 2,
      'no-multiple-empty-lines': [2, { max: 2 }],
      'no-new-object': 2,
      'no-new-symbol': 2,
      'no-new-wrappers': 2,
      'no-tabs': 2,
      'no-this-before-super': 2,
      'no-throw-literal': 2,
      'no-trailing-spaces': 2,
      'no-unexpected-multiline': 2,
      'no-unused-vars': ['error', { args: 'none' }],
      'no-var': 2,
      'no-with': 2,
      'object-curly-spacing': ['error', 'always'],
      'object-shorthand': ['error', 'always'],
      'one-var': [2, {
        var: 'never',
        let: 'never',
        const: 'never',
      }],
      'operator-linebreak': [2, 'after'],
      'padded-blocks': [2, 'never'],
      'prefer-const': [2, { destructuring: 'all' }],
      'prefer-promise-reject-errors': 2,
      'prefer-rest-params': 2,
      'prefer-spread': 2,
      'quote-props': [2, 'consistent'],
      'quotes': ['error', 'single'],
      'require-jsdoc': 'off',
      'rest-spread-spacing': 2,
      'semi': 2,
      'semi-spacing': 2,
      'space-before-blocks': 2,
      'space-before-function-paren': [2, {
        asyncArrow: 'always',
        anonymous: 'never',
        named: 'never',
      }],
      'spaced-comment': [2, 'always'],
      'switch-colon-spacing': 2,
      'yield-star-spacing': [2, 'after'],
    },
  },
  {
    files: ['**/*.html'],
    extends: [
      ...angular.configs.templateRecommended,
      ...angular.configs.templateAccessibility,
    ],
    rules: {},
  }
);
